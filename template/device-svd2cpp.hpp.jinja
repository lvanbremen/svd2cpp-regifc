
// SPDX-License-Identifier: MPL-2.0

#include "{{device.name.lower()}}-svd2cpp.h"
#include "common-svd2cpp.h"

{% for group_name, peripherals in groups.items() %}
{% for peripheral in peripherals | sort(attribute='base_address') %}
{% if loop.index0 == 0 %}
struct {{group_name}}Interface {
{% for register in peripheral.registers | sort(attribute='address_offset') %}
{% if loop.index0 == 0 %}
{% set prev_address_end = 0 %}
{% else %}
{% set prev_address_end = loop.previtem.address_offset + loop.previtem.size // 8 %}
{% endif %}
{% if prev_address_end <= register.address_offset %}
{% if prev_address_end != register.address_offset %}
private:
    std::uint8_t _reserved_{{"%X" | format(prev_address_end)}}[{{register.address_offset - prev_address_end}}];
public:

{% endif %}
    // {{register.description}}
    struct {{register.name}}Reg : public Register<std::uint{{register.size}}_t, {{"0x%0*X" | format(register.size // 4, register.reset_value)}}, {{register.name}}Reg> {
{% for field in register.fields | sort(attribute='bit_offset') %}
        using {{field.name}}Field = VolatileField<{{register.name}}Reg, {{field.bit_offset}}, {{field.bit_width}}>;
        // {{field.description}}
        auto {{field.name}}() { return {{field.name}}Field{ *this, val_vol }; }
{% endfor %}

        struct StableAccess : public StableAccessBase<reg_type> {
            StableAccess(volatile reg_type& val_vol__, reg_type val_copy__) : StableAccessBase<reg_type>(val_vol__, val_copy__) {}
{% for field in register.fields | sort(attribute='bit_offset') %}
            auto {{field.name}}() { return StableField<decltype(*this), {{field.bit_offset}}, {{field.bit_width}}>{ *this, val_copy }; }
            // {{field.description}}
            template <typename Targ> auto& {{field.name}}(Targ val) { return {{field.name}}().mod(val); }
{% endfor %}
        };
    } {{register.name}};
{% endif %}
{% endfor %}
};

{% endif %}
#define {{peripheral.name}}_IFC_ADDR {{"0x%0*X" | format(device.width // 4, peripheral.base_address)}}
#define {{peripheral.name}}_IFC      (*({{group_name}}Interface*)({{peripheral.name}}_IFC_ADDR))
{% endfor %}

{% endfor %}
